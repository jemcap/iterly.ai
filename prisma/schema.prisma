// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String // Optional for OAuth users
  name        String
  designFiles DesignFile[]
  feedback    Feedback[]   @relation("UserFeedback")
  tasks       Task[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Account     Account[]
  Session     Session[]
  Feedback    Feedback[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DesignFile {
  id           String @id @default(uuid())
  figmaFileId  String @unique
  name         String
  figmaFileUrl String

  uploadedBy   User       @relation(fields: [uploadedById], references: [id])
  uploadedById String
  feedback     Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("design_files")
}

// Raw feedback from Figma comments
model Feedback {
  id             String  @id @default(cuid())
  content        String
  figmaCommentId String? // Original Figma comment ID for uniqueness
  figmaNodeId    String? // Specific node/frame in Figma

  // AI Processing
  isProcessed Boolean @default(false)
  aiSummary   String? // NLP-generated summary
  priority    String  @default("medium") // low, medium, high

  // Relations
  author       User       @relation("UserFeedback", fields: [authorId], references: [id])
  authorId     String
  designFile   DesignFile @relation(fields: [designFileId], references: [id])
  designFileId String
  tasks        Task[] // One feedback can generate multiple tasks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}

// Generated tasks for the board
model Task {
  id          String @id @default(cuid())
  title       String
  description String
  status      String @default("backlog") // backlog, todo, in_progress, in_review, blocked, done
  priority    String @default("medium") // low, medium, high

  // Relations
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  assignee   User?    @relation(fields: [assigneeId], references: [id])
  assigneeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}
